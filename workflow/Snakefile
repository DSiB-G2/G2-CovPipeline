SAMPLES = [
    "RV417026_S15_L001",
    "RV417027_S18_L001",
    "RV417028_S20_L001",
    "RV417029_S19_L001"
]

genome = "reference"

rule all:
    input:
        "../vcf/RV417026_S15_L001.filtered.vcf",
        "../vcf/RV417027_S18_L001.filtered.vcf",
        "../vcf/RV417028_S20_L001.filtered.vcf",
        "../vcf/RV417029_S19_L001.filtered.vcf",
        "../mapped/RV417026_S15_L001.sorted.bam.flagstat",
        "../mapped/RV417027_S18_L001.sorted.bam.flagstat",
        "../mapped/RV417028_S20_L001.sorted.bam.flagstat",
        "../mapped/RV417029_S19_L001.sorted.bam.flagstat",
        "../mapped/RV417026_S15_L001.sorted.bam.idxstats",
        "../mapped/RV417027_S18_L001.sorted.bam.idxstats",
        "../mapped/RV417028_S20_L001.sorted.bam.idxstats",
        "../mapped/RV417029_S19_L001.sorted.bam.idxstats",


rule trimming:
    input:
        first = "../data/{sample}_R1_001.fastq",
        second = "../data/{sample}_R2_001.fastq"
    output:
        first = "../data/trimmed/{sample}_1.trimmed.fastq",
        second = "../data/trimmed/{sample}_2.trimmed.fastq",
        html_report = "../reports/{sample}/{sample}_report.html",
        json_report = "../reports/{sample}/{sample}_report.json",
    conda:
        "envs/fastp.yaml"
    shell:
        "fastp -i {input.first} -I {input.second} -o {output.first} -O {output.second} -h {output.html_report} -j {output.json_report} --detect_adapter_for_pe"


#uses wrapper provided in their database
rule bwa_index:
    input:
        "../reference/" + genome + ".fasta"
    output:
        idx=multiext("../data/" + genome + ".fasta", ".amb", ".ann", ".bwt", ".pac", ".sa"),
    log:
        "logs/bwa_index/" + genome + ".log",
    params:
        algorithm="bwtsw",
    wrapper:
        "v1.21.1/bio/bwa/index"

#this wrapper does bwa mem and change it to bam when sort is "none"
rule bwa_mem:
    input:
        reads=["../data/trimmed/{sample}_1.trimmed.fastq", "../data/trimmed/{sample}_2.trimmed.fastq"],
        idx=multiext("../data/" + genome + ".fasta", ".amb", ".ann", ".bwt", ".pac", ".sa"),
    output:
        "../mapped/{sample}.bam",
    log:
        "logs/bwa_mem/{sample}.log",
    params:
        sorting="none",  # Can be 'none', 'samtools' or 'picard'.
    wrapper:
        "v1.21.1/bio/bwa/mem"


rule samtools_sort:
    input:
        "../mapped/{sample}.bam",
    output:
        "../mapped/{sample}.sorted.bam",
    log:
        "{sample}.log",
    wrapper:
        "v1.21.1/bio/samtools/sort"

rule samtools_index:
    input:
        "../mapped/{sample}.sorted.bam",
    output:
        "../mapped/{sample}.sorted.bam.bai",
    log:
        "logs/samtools_index/{sample}.log",
    wrapper:
        "v1.21.1/bio/samtools/index"

#qc
rule samtools_flagstat:
    input:
        "../mapped/{sample}.sorted.bam",
    output:
        "../mapped/{sample}.sorted.bam.flagstat",
    log:
        "{sample}.log",
    params:
        extra="",  # optional params string
    wrapper:
        "v1.21.1-1-g03463da5/bio/samtools/flagstat"

#qc
rule samtools_idxstats:
    input:
        bam="../mapped/{sample}.sorted.bam",
        idx="../mapped/{sample}.sorted.bam.bai",
    output:
        "../mapped/{sample}.sorted.bam.idxstats",
    log:
        "logs/samtools/idxstats/{sample}.log",
    params:
        extra="",  # optional params string
    wrapper:
        "v1.21.1-1-g03463da5/bio/samtools/idxstats"


rule bcftools_mpileup:
    input:
        alignments="../mapped/{sample}.sorted.bam",
        ref="../reference/" + genome + ".fasta",  # this can be left out if --no-reference is in options
        index="../mapped/{sample}.sorted.bam.bai"
    output:
        pileup="../pileups/{sample}.pileup.bcf",
    params:
        uncompressed_bcf=False,
    log:
        "logs/bcftools_mpileup/{sample}.log",
    wrapper:
        "v1.21.1/bio/bcftools/mpileup"

rule bcftools_call:
    input:
        pileup="../pileups/{sample}.pileup.bcf",
    output:
        calls="../mapped/{sample}.calls.vcf",
    params:
        caller="-m",  # valid options include -c/--consensus-caller or -m/--multiallelic-caller
        extra="--ploidy 1 -v",
    log:
        "logs/bcftools_call/{sample}.log",
    wrapper:
        "v1.21.1/bio/bcftools/call"

rule filter_vcf:
    input:
        "../mapped/{sample}.calls.vcf"
    output:
        "../vcf/{sample}.filtered.vcf"
    wrapper:
        "v1.21.1/bio/vcftools/filter"